import asyncio
import os
from datetime import datetime

import cv2
import logging
from pathlib import Path
from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto, ReplyKeyboardRemove, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select

from app.database.models import User, async_session
# from app.recognition.face import recognize_face, save_embedding, mtcnn, get_photos_by_name
# from config import known_embeddings


import app.database.requests as rq
import app.keyboards as kb
import app.recognition.face as fc
import  app.expimp.migration as mg

router = Router()
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
Path("downloads").mkdir(exist_ok=True)
Path("app/recognition/known_faces").mkdir(parents=True, exist_ok=True)


class AddFaceState(StatesGroup):
    waiting_for_name_selection = State()
    waiting_for_new_photo = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ
    waiting_for_photo = State()
    waiting_for_name = State()
    confirmation = State()

# –î–æ–±–∞–≤–∏–º –≤ –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class MainState(StatesGroup):
    recognizing = State()
    adding_face = AddFaceState()



async def download_photo(bot: Bot, file_id: str, prefix: str = "") -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        download_path = Path("downloads") / f"{prefix}{file_id}.jpg"

        await bot.download_file(file_path, str(download_path))
        return str(download_path)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        raise


async def validate_photo(image_path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ç–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–¥–Ω–æ–≥–æ –ª–∏—Ü–∞"""
    try:
        image = cv2.cvtColor(cv2.imread(image_path), cv2.COLOR_BGR2RGB)
        faces = fc.mtcnn(image)

        if faces is None or len(faces) == 0:
            logger.warning("–õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return False
        if len(faces) > 1:
            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ü")
            return False
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return False


@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!\n –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –≤—Å–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ñ–æ—Ä—É–º–∞.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç, –∏ —è –ø–æ–∏—â—É –≤–∞—Å –Ω–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö",
        reply_markup=kb.get_start_keyboard(),
    )
    await state.set_state(MainState.recognizing)

# –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –î–í–ò–ñ–ï–ù–ò–Ø

@router.message(F.photo)
async def handle_user_photo(message: Message, bot: Bot):
    try:
        user_tg_id = message.from_user.id
        photo = message.photo[-1]

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        download_path = await download_photo(bot, photo.file_id, "user_")
        if not await validate_photo(download_path):
            await message.answer("–ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ –ª–∏—Ü–æ!")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        embedding = await fc.save_embedding(download_path, user_tg_id)
        if embedding is None:
            await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")
            return

        # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        await message.answer("üîç –ò—â–µ–º –≤–∞—à–∏ —Ñ–æ—Ç–æ...")
        found_photos = await rq.find_photos_by_user(user_tg_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if found_photos:
            await send_photos(message.chat.id, found_photos, bot)
        else:
            await message.answer("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        if download_path and os.path.exists(download_path):
            os.remove(download_path)



@router.message(lambda message: message.text == "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ª–∏—Ü–æ")
async def recognize_handler(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    await state.set_state(MainState.recognizing)


@router.message(MainState.recognizing, lambda message: message.photo)
async def recognition_photo_handler(message: Message, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
    try:
        photo = message.photo[-1]
        download_path = await download_photo(bot, photo.file_id, "recog_")

        if result := await fc.recognize_face(download_path):
            response = "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞:\n" + "\n".join(
                [f"{name} ({sim:.2%})" for name, sim in result]
            )
            await message.answer(response)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ª—é–¥–µ–π.")
        #–∑–∞–º–µ–Ω–∏–ª –±–ª–æ–∫ –Ω–∞ –Ω–æ–≤—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FAISS
        # if result := await fc.recognize_face(download_path):
        #     await message.answer(f"–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—Å—Ç—å: {result}")
        # else:
        #     await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞.")

        os.remove(download_path)
        await state.clear()

    except Exception as e:
        logger.error(f"Recognition error: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()


@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
async def add_embeddings_handler(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    names = await rq.get_all_names()

    if not names:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏—Ü.")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–º–µ–Ω–∞–º–∏
    keyboard = kb.get_names_keyboard(names)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏:", reply_markup=keyboard)
    await state.set_state(AddFaceState.waiting_for_name_selection)

@router.message(AddFaceState.waiting_for_name_selection)
async def name_selection_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."""
    selected_name = message.text.strip()

    if not selected_name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not await rq.check_name_exists(selected_name):
        await message.answer("–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_name=selected_name)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º—è: {selected_name}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.",  reply_markup=kb.get_cancel_keyboard())
    await state.set_state(AddFaceState.waiting_for_new_photo)

# –†–∞–±–æ—Ç–∞–ª–æ, –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É
# @router.message(AddFaceState.waiting_for_name_selection)
# async def name_selection_handler(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
#     selected_name = message.text.strip()
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     if not await rq.check_name_exists(selected_name):
#         await message.answer("–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#         return
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
#     await state.update_data(selected_name=selected_name)
#     await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º—è: {selected_name}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.")
#     await state.set_state(AddFaceState.waiting_for_new_photo)

@router.message(AddFaceState.waiting_for_new_photo, lambda message: message.photo)
async def add_new_embedding_photo_handler(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è)
        data = await state.get_data()
        selected_name = data.get("selected_name")
        tg_id = message.from_user.id

        if not selected_name:
            await message.answer("–û—à–∏–±–∫–∞: –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        download_path = await download_photo(bot, photo.file_id, "add_")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–¥–Ω–æ–≥–æ –ª–∏—Ü–∞
        if not await validate_photo(download_path):
            await message.answer("–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ç–æ. –ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            os.remove(download_path)
            # await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        embed = await fc.save_embedding(download_path, selected_name, tg_id)
        if embed is not None:
            await message.answer(f"‚úÖ –ù–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è {selected_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.get_start_keyboard())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞.", reply_markup=kb.get_start_keyboard())

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(download_path)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
        await state.clear()


# –†–∞–±–æ—Ç–∞–ª–æ. –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –±–∞–∑—É
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏
# @router.message(AddFaceState.waiting_for_new_photo, lambda message: message.photo)
# async def add_new_embedding_photo_handler(message: Message, state: FSMContext, bot: Bot):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"""
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è)
#         data = await state.get_data()
#         selected_name = data.get("selected_name")
#         tg_id = message.from_user.id
#
#         # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
#         photo = message.photo[-1]
#         download_path = await download_photo(bot, photo.file_id, "add_")
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–¥–Ω–æ–≥–æ –ª–∏—Ü–∞
#         if not await validate_photo(download_path):
#             await message.answer("–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ç–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#             os.remove(download_path)
#             await state.clear()
#             return
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#         embed = await fc.save_embedding(download_path, selected_name, tg_id)
#         if embed is not None:
#             await message.answer(f"‚úÖ –ù–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è {selected_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
#         else:
#             await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞.")
#
#         # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
#         os.remove(download_path)
#
#         # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#         await state.clear()
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {str(e)}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
#         await state.clear()


# –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü
@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ª–∏—Ü–æ")
async def add_face_start_handler(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–∞"""
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É")
    await state.set_state(MainState.adding_face.waiting_for_photo)

#  –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞
@router.message(AddFaceState.waiting_for_photo, lambda message: message.photo)
async def add_face_photo_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        photo = message.photo[-1]
        download_path = await download_photo(bot, photo.file_id, "add_")

        if not await validate_photo(download_path):
            await message.answer("–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ç–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            os.remove(download_path)
            await state.clear()
            return

        await state.update_data(photo_path=download_path)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞:")
        await state.set_state(AddFaceState.waiting_for_name)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–∞: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")
        await state.clear()

# # –°—Ç–∞—Ä—ã–π —Ä–æ—É—Ç–µ—Ä –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 1 —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞
# @router.message(AddFaceState.waiting_for_photo, lambda message: message.photo)
# async def add_face_photo_handler(message: Message, state: FSMContext, bot: Bot):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
#     try:
#         photo = message.photo[-1]
#         download_path = await download_photo(bot, photo.file_id, "add_")
#
#         if not await validate_photo(download_path):
#             await message.answer("–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ç–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#             os.remove(download_path)
#             await state.clear()
#             return
#
#         await state.update_data(photo_path=download_path)
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞:")
#         await state.set_state(AddFaceState.waiting_for_name)
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–∞: {str(e)}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")
#         await state.clear()


@router.message(AddFaceState.waiting_for_name)
async def add_face_name_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏."""
    name = message.text.strip()
    tg_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with async_session() as session:
        existing = await session.execute(
            select(User).where(User.name == name)
        )
        if existing.scalars().first():
            await message.answer("‚ö†Ô∏è –≠—Ç–æ –∏–º—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
            return

    if not name.replace(' ', '').isalnum():
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã")
        return

    await state.update_data(name=name, tg_id=tg_id)
    await message.answer(
        f"–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞?\n–ò–º—è: {name}",
        reply_markup=kb.get_confirmation_keyboard()
    )
    await state.set_state(AddFaceState.confirmation)


@router.callback_query(AddFaceState.confirmation)
async def confirmation_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    data = await state.get_data()
    photo_path = data.get('photo_path')
    name = data.get('name')
    tg_id = data.get('tg_id')

    try:
        if callback.data == "confirm_add":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
            embed = await fc.save_embedding(photo_path, name, tg_id)
            if embed is not None:
                await callback.message.answer("‚úÖ –ß–µ–ª–æ–≤–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞.")
        else:
            await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    finally:
        if photo_path and os.path.exists(photo_path):
            os.remove(photo_path)
        await state.clear()
        await callback.answer()


@router.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π"""
    data = await state.get_data()

    if photo_path := data.get('photo_path'):
        if os.path.exists(photo_path):
            os.remove(photo_path)

    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=kb.get_start_keyboard())

@router.message(F.text.lower() == "–Ω–∞–π–¥–∏")
async def scan_photos_handler(message: Message):
    await message.answer("‚è≥ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
    new_faces = await rq.process_directory()
    await message.answer(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∏—Ü: {new_faces}")

@router.message(F.text.lower() == "–ø—Ä–æ–≤–µ—Ä—å")
async def scan_photos_handler(message: Message):
    await message.answer("‚è≥ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
    del_file = await rq.cleanup_missing_files()
    await message.answer(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! —É–¥–∞–ª–µ–Ω–æ: {del_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤")
    # new_faces = await rq.process_directory()
    # await message.answer(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∏—Ü: {new_faces}")



# @router.message(F.text.lower() == "–Ω–∞–π–¥–∏")
# async def scan_photos_handler(message: Message):
#     """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫–µ"""
#     await message.answer("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
#     await rq.process_directory()
#     await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ: ...")

# #___________________________________________________________________________________________________________________
# #   –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç–æ–º
# #___________________________________________________________________________________________________________________
#
# @router.message(F.text.startswith("–ù–∞–π—Ç–∏ "))
# async def find_photos_handler(message: Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –∏–º–µ–Ω–∏"""
#     try:
#         name = message.text.split(" ", 1)[1].strip()
#         photos = await get_photos_by_name(name)
#
#         if not photos:
#             await message.answer(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å {name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#             return
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#         response = f"–ù–∞–π–¥–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ:\n" + "\n".join(photos[:14])
#         await message.answer(response)
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
# #___________________________________________________________________________________________________________________
# #   –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç–æ–º
# #___________________________________________________________________________________________________________________

#___________________________________________________________________________________________________________________
#   –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞–º–∏ 10 —à—Ç—É–∫ –≤ –∞–ª—å–±–æ–º–µ
#___________________________________________________________________________________________________________________

@router.message(F.text.lower().startswith("–Ω–∞–π—Ç–∏ "))
async def find_photos_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–ª—å–±–æ–º–∞–º–∏"""
    try:
        # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ "–Ω–∞–π—Ç–∏"
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '–Ω–∞–π—Ç–∏'.")
            return

        name = parts[1].strip()
        photos = await rq.get_photos_by_name(name)

        if not photos:
            await message.answer(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # base_path = "./user_photos/"
        base_path = Path("./user_photos")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Path
        total = len(photos)
        await message.answer(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {total} —Ñ–æ—Ç–æ. –§–æ—Ä–º–∏—Ä—É—é –∞–ª—å–±–æ–º—ã...")

        success = 0
        errors = 0
        chunk_size = 10

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10
        for i in range(0, total, chunk_size):
            chunk = photos[i:i + chunk_size]
            media_group = []

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–ª—å–±–æ–º
            for photo_path in chunk:
                try:
                    full_path = os.path.join(base_path, photo_path)

                    if not os.path.exists(full_path):
                        logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")
                        errors += 1
                        continue

                    media_group.append(InputMediaPhoto(
                        media=FSInputFile(full_path),
                        caption=f"–§–æ—Ç–æ {i + 1}-{i + len(chunk)}" if len(media_group) == 0 else None
                    ))
                    success += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ {photo_path}: {str(e)}")
                    errors += 1

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
            if media_group:
                try:
                    await message.answer_media_group(media_group)
                    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–ª—å–±–æ–º–∞–º–∏

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Ñ–∞–π–ª–æ–≤
                    if (i // chunk_size) % 5 == 0:
                        await message.answer(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {min(i + chunk_size, total)}/{total}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞: {str(e)}")
                    errors += len(media_group)
                    success -= len(media_group)

        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"‚úÖ –í—Å–µ –∞–ª—å–±–æ–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success} —Ñ–æ—Ç–æ\n"
            f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {errors}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


# –î–í–ò–ñ–ï–ù–ò–ï –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
async def send_photos(chat_id: int, photo_paths: list, bot: Bot):
    base_path = Path("./user_photos")

    for i in range(0, len(photo_paths), 10):
        media_group = []
        for path in photo_paths[i:i + 10]:
            full_path = base_path / path
            if full_path.exists():
                media_group.append(InputMediaPhoto(
                    media=FSInputFile(full_path)
                ))

        if media_group:
            await bot.send_media_group(chat_id, media_group)
            await asyncio.sleep(1)

#___________________________________________________________________________________________________________________
#   –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞–º–∏ 10 —à—Ç—É–∫ –≤ –∞–ª—å–±–æ–º–µ
#___________________________________________________________________________________________________________________
# #
# #___________________________________________________________________________________________________________________
# #   –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
# #___________________________________________________________________________________________________________________
#
# @router.message(F.text.startswith("–ù–∞–π—Ç–∏ "))
# async def find_photos_handler(message: Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –∏–º–µ–Ω–∏"""
#     try:
#         name = message.text.split(" ", 1)[1].strip()
#         photos = await get_photos_by_name(name)
#
#         if not photos:
#             await message.answer(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#             return
#
#         # –£–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ
#         base_path = "./"
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
#         total = len(photos)
#         await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ {total} —Ñ–æ—Ç–æ. –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É...")
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
#         success = 0
#         errors = 0
#
#         for idx, photo_path in enumerate(photos, 1):  # –£–±—Ä–∞–ª–∏ —Å—Ä–µ–∑ [:10]
#             try:
#                 full_path = os.path.join(base_path, photo_path)
#
#                 if not os.path.exists(full_path):
#                     logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")
#                     errors += 1
#                     continue
#
#                 file = FSInputFile(full_path)
#                 await message.answer_document(file)
#                 success += 1
#
#                 # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Ñ–∞–π–ª–æ–≤
#                 if idx % 10 == 0:
#                     await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {idx}/{total}...")
#
#                 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
#                 await asyncio.sleep(1)  # –ë—ã–ª–æ 0.5
#
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {photo_path}: {str(e)}")
#                 errors += 1
#
#         # –§–∏–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏
#         await message.answer(
#             f"‚úÖ –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
#             f"‚ùå –û—à–∏–±–æ–∫: {errors}"
#         )
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}", exc_info=True)
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
# #___________________________________________________________________________________________________________________
# #   –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
# #___________________________________________________________________________________________________________________


# #___________________________________________________________________________________________________________________
# #   –û—Ç–ø—Ä–∞–≤–∫–∞ 10 –ø–µ—Ä–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
# #___________________________________________________________________________________________________________________
#
# @router.message(F.text.startswith("–ù–∞–π—Ç–∏ "))
# async def find_photos_handler(message: Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –∏–º–µ–Ω–∏"""
#     try:
#         name = message.text.split(" ", 1)[1].strip()
#         photos = await rq.get_photos_by_name(name)
#
#         if not photos:
#             await message.answer(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#             return
#
#         # –£–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
#         base_path = "./"
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#         await message.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä–≤—ã–µ 10:")
#
#         for photo_path in photos[:10]:
#             try:
#                 # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
#                 full_path = os.path.join(base_path, photo_path)
#
#                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
#                 if not os.path.exists(full_path):
#                     logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")
#                     continue
#
#                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
#                 file = FSInputFile(full_path)
#                 await message.answer_document(file)
#
#                 # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
#                 await asyncio.sleep(0.5)
#
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {photo_path}: {str(e)}")
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}", exc_info=True)
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
# #___________________________________________________________________________________________________________________
# #   –û—Ç–ø—Ä–∞–≤–∫–∞ 10 –ø–µ—Ä–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
# #___________________________________________________________________________________________________________________

#----------------------------------------------------------------------------------------------------------------------|
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
#----------------------------------------------------------------------------------------------------------------------|


@router.message(Command("export"))
async def handle_export_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export"""
    names = await rq.get_all_names()

    if not names:
        await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–µ—Å—å —Å–ø–∏—Å–æ–∫':",
        reply_markup=kb.get_export_keyboard(names)
    )





@router.message(F.text.startswith("üîπ "))
async def handle_single_export(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_name = message.text[2:]  # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∂–∏-–ø—Ä–µ—Ñ–∏–∫—Å
    await process_export(message, user_name)

# –ù—É–∂–Ω–æ –∫—Ä–∞—Å–∏–≤–æ –≤—Å—ë –¥–æ–¥–µ–ª–∞—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
# –ù–∞—á–∞–ª–æ
@router.message(F.text == "üìã –í–µ—Å—å —Å–ø–∏—Å–æ–∫")
async def handle_full_export_confirm(message: Message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ?",
        reply_markup=kb.get_confirmation_keyboard()
    )

@router.callback_query()
async def handle_full_export(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if callback.data == "confirm_add":
        await process_export(callback.message)
    else:
        await callback.message.answer("‚ùå –û—Ç–º–µ–Ω–∞")

# –ö–æ–Ω–µ—Ü
# –ù—É–∂–Ω–æ –∫—Ä–∞—Å–∏–≤–æ –≤—Å—ë –¥–æ–¥–µ–ª–∞—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


async def process_export(message: Message, user_name: str = None):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –≤ –ø–∞–º—è—Ç–∏
        zip_buffer = await mg.export_user_data(user_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_name = f"export_{user_name if user_name else 'full'}_{datetime.now().strftime('%Y%m%d')}.zip"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(
            document=BufferedInputFile(
                file=zip_buffer.read(),
                filename=file_name
            ),
            caption=f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö {'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + user_name if user_name else '–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}"
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
    finally:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardRemove()
        )


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await message.answer(
        "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=ReplyKeyboardRemove()
    )
# ----------------------------------------------------------------------------------------------------------------------|
#  –ó–∞–∫–æ–Ω—á–∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
# ----------------------------------------------------------------------------------------------------------------------|
